{"remainingRequest":"C:\\Users\\windows\\Project\\toutiaomobile\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\windows\\Project\\toutiaomobile\\src\\views\\article\\components\\comment-list.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\windows\\Project\\toutiaomobile\\src\\views\\article\\components\\comment-list.vue","mtime":1614870251055},{"path":"C:\\Users\\windows\\Project\\toutiaomobile\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\windows\\Project\\toutiaomobile\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\windows\\Project\\toutiaomobile\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\windows\\Project\\toutiaomobile\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KDQovLyDov5nph4zlj6/ku6Xlr7zlhaXlhbbku5bmlofku7bvvIjmr5TlpoLvvJrnu4Tku7bvvIzlt6Xlhbdqc++8jOesrOS4ieaWueaPkuS7tmpz77yManNvbuaWh+S7tu+8jOWbvueJh+aWh+S7tuetieetie+8iQ0KaW1wb3J0IHsgZ2V0Q29tbWVudHMgfSBmcm9tICdAL2FwaS9jb21tZW50LmpzJw0KaW1wb3J0IENvbW1lbnRzSXRlbSBmcm9tICcuL2NvbW1lbnRzLWl0ZW0udnVlJw0KZXhwb3J0IGRlZmF1bHQgew0KICBuYW1lOiAnQ29tbWVudExpc3QnLA0KICBjb21wb25lbnRzOiB7DQogICAgQ29tbWVudHNJdGVtDQogIH0sDQogIC8vIOWumuS5ieWxnuaApw0KICBtb2RlbDoge30sDQogIHByb3BzOiB7DQogICAgc291cmNlOiB7DQogICAgICB0eXBlOiBbTnVtYmVyLCBTdHJpbmddLA0KICAgICAgcmVxdWlyZTogdHJ1ZQ0KICAgIH0sDQogICAgbGlzdDogew0KICAgICAgdHlwZTogQXJyYXksDQogICAgICBkZWZhdWx0OiBmdW5jdGlvbiAoKSB7DQogICAgICAgIHJldHVybiBbXQ0KICAgICAgfQ0KICAgIH0NCiAgfSwNCiAgZGF0YSAoKSB7DQogICAgcmV0dXJuIHsNCiAgICAgIC8vIGxpc3Q6IFtdLA0KICAgICAgbG9hZGluZzogZmFsc2UsDQogICAgICBmaW5pc2hlZDogZmFsc2UsDQogICAgICByZWZyZXNoaW5nOiBmYWxzZSwNCiAgICAgIG9mZnNldDogbnVsbCwgLy8g6I635Y+W5LiL5LiA5qyh6K+35rGC55qE5pe26Ze05oizDQogICAgICBsaW1pdDogMTAgLy8g5q+P5qyh6I635Y+W55qE5pWw5o2uDQogICAgfQ0KICB9LA0KICAvLyDorqHnrpflsZ7mgKfvvIzkvJrnm5HlkKzkvp3otZblsZ7mgKflgLzpmo/kuYvlj5jljJYNCiAgY29tcHV0ZWQ6IHt9LA0KICAvLyDnm5HmjqdkYXRh5Lit55qE5pWw5o2u5Y+Y5YyWDQogIHdhdGNoOiB7fSwNCiAgLy8g5pa55rOV6ZuG5ZCIDQogIG1ldGhvZHM6IHsNCiAgICBhc3luYyBvbkxvYWQgKCkgew0KICAgICAgLyoNCiAgICAgICAqIDEu6K+35rGC6I635Y+W5pWw5o2uDQogICAgICAgKiAyLuWwhuaVsOaNrua3u+WKoOWIsOWIl+ihqOS4rQ0KICAgICAgICogMy7lsIZsb2FkaW5n6K6+572u5Li6ZmFsc2UNCiAgICAgICAqIDQu5Yik5pat5piv5ZCm5ZCr5pyJ5pWw5o2uDQogICAgICAgKiA1LuWmguaenOi/mOacieaVsOaNru+8jOWwseivt+axguS4i+S4gOmhteaVsOaNrg0KICAgICAgICogNi7msqHmnInmlbDmja7lsLHlsIZmaW5pc2hlZOiuvue9ruS4unRydWUNCiAgICAgICovDQogICAgICB0cnkgew0KICAgICAgICBjb25zdCB7IGRhdGEgfSA9IGF3YWl0IGdldENvbW1lbnRzKHsNCiAgICAgICAgICB0eXBlOiAnYScsDQogICAgICAgICAgc291cmNlOiB0aGlzLnNvdXJjZSwNCiAgICAgICAgICBvZmZzZXQ6IHRoaXMub2Zmc2V0LA0KICAgICAgICAgIGxpbWl0OiB0aGlzLmxpbWl0DQogICAgICAgIH0pDQogICAgICAgIGNvbnN0IHsgcmVzdWx0cyB9ID0gZGF0YS5kYXRhDQogICAgICAgIHRoaXMuJGVtaXQoJ29ubG9hZC1zdWNjZXNzJywgZGF0YS5kYXRhKQ0KICAgICAgICB0aGlzLmxpc3QucHVzaCguLi5yZXN1bHRzKQ0KICAgICAgICBpZiAocmVzdWx0cy5sZW5ndGgpIHsNCiAgICAgICAgICB0aGlzLm9mZnNldCA9IGRhdGEuZGF0YS5sYXN0X2lkDQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgdGhpcy5maW5pc2hlZCA9IHRydWUNCiAgICAgICAgfQ0KICAgICAgICBjb25zb2xlLmxvZyh0aGlzLmxpc3QpDQogICAgICB9IGNhdGNoIChlcnJvcikgew0KICAgICAgICB0aGlzLnRvYXN0KHsgbWVzc2FnZTogJ+iOt+WPluivhOiuuuWIl+ihqOWksei0pSEnLCBkdXJhdGlvbjogNTAwIH0pDQogICAgICB9DQogICAgfQ0KICB9LA0KICAvLyDnlJ/lkb3lkajmnJ8gLSDliJvlu7rlrozmiJDvvIjlj6/ku6Xorr/pl67lvZPliY10aGlz5a6e5L6L77yJDQogIGNyZWF0ZWQgKCkgew0KICAgIHRoaXMub25Mb2FkKCkNCiAgfSwNCiAgLy8g55Sf5ZG95ZGo5pyfIC0g5oyC6L295a6M5oiQ77yI5Y+v5Lul6K6/6ZeuRE9N5YWD57Sg77yJDQogIG1vdW50ZWQgKCkge30sDQogIGJlZm9yZUNyZWF0ZSAoKSB7fSwgLy8g55Sf5ZG95ZGo5pyfIC0g5Yib5bu65LmL5YmNDQogIGJlZm9yZU1vdW50ICgpIHt9LCAvLyDnlJ/lkb3lkajmnJ8gLSDmjILovb3kuYvliY0NCiAgYmVmb3JlVXBkYXRlICgpIHt9LCAvLyDnlJ/lkb3lkajmnJ8gLSDmm7TmlrDkuYvliY0NCiAgdXBkYXRlZCAoKSB7fSwgLy8g55Sf5ZG95ZGo5pyfIC0g5pu05paw5LmL5ZCODQogIGJlZm9yZURlc3Ryb3kgKCkge30sIC8vIOeUn+WRveWRqOacnyAtIOmUgOavgeS5i+WJjQ0KICBkZXN0cm95ZWQgKCkge30sIC8vIOeUn+WRveWRqOacnyAtIOmUgOavgeWujOaIkA0KICBhY3RpdmF0ZWQgKCkge30gLy8g5aaC5p6c6aG16Z2i5pyJa2VlcC1hbGl2Zee8k+WtmOWKn+iDve+8jOi/meS4quWHveaVsOS8muinpuWPkQ0KfQ0K"},{"version":3,"sources":["comment-list.vue"],"names":[],"mappings":";;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"comment-list.vue","sourceRoot":"src/views/article/components","sourcesContent":["<template>\r\n  <van-list v-model=\"loading\" :finished=\"finished\" finished-text=\"没有更多了\" @load=\"onLoad\">\r\n    <CommentsItem v-for=\"(item, index) in list\" :key=\"index\" :title=\"item.content\" :comment=\"item\" @update-is_liking=\"item.is_liking = $event\" @replay-click=\"$emit('replay-click', $event)\"/>\r\n  </van-list>\r\n</template>\r\n\r\n<script>\r\n// 这里可以导入其他文件（比如：组件，工具js，第三方插件js，json文件，图片文件等等）\r\nimport { getComments } from '@/api/comment.js'\r\nimport CommentsItem from './comments-item.vue'\r\nexport default {\r\n  name: 'CommentList',\r\n  components: {\r\n    CommentsItem\r\n  },\r\n  // 定义属性\r\n  model: {},\r\n  props: {\r\n    source: {\r\n      type: [Number, String],\r\n      require: true\r\n    },\r\n    list: {\r\n      type: Array,\r\n      default: function () {\r\n        return []\r\n      }\r\n    }\r\n  },\r\n  data () {\r\n    return {\r\n      // list: [],\r\n      loading: false,\r\n      finished: false,\r\n      refreshing: false,\r\n      offset: null, // 获取下一次请求的时间戳\r\n      limit: 10 // 每次获取的数据\r\n    }\r\n  },\r\n  // 计算属性，会监听依赖属性值随之变化\r\n  computed: {},\r\n  // 监控data中的数据变化\r\n  watch: {},\r\n  // 方法集合\r\n  methods: {\r\n    async onLoad () {\r\n      /*\r\n       * 1.请求获取数据\r\n       * 2.将数据添加到列表中\r\n       * 3.将loading设置为false\r\n       * 4.判断是否含有数据\r\n       * 5.如果还有数据，就请求下一页数据\r\n       * 6.没有数据就将finished设置为true\r\n      */\r\n      try {\r\n        const { data } = await getComments({\r\n          type: 'a',\r\n          source: this.source,\r\n          offset: this.offset,\r\n          limit: this.limit\r\n        })\r\n        const { results } = data.data\r\n        this.$emit('onload-success', data.data)\r\n        this.list.push(...results)\r\n        if (results.length) {\r\n          this.offset = data.data.last_id\r\n        } else {\r\n          this.finished = true\r\n        }\r\n        console.log(this.list)\r\n      } catch (error) {\r\n        this.toast({ message: '获取评论列表失败!', duration: 500 })\r\n      }\r\n    }\r\n  },\r\n  // 生命周期 - 创建完成（可以访问当前this实例）\r\n  created () {\r\n    this.onLoad()\r\n  },\r\n  // 生命周期 - 挂载完成（可以访问DOM元素）\r\n  mounted () {},\r\n  beforeCreate () {}, // 生命周期 - 创建之前\r\n  beforeMount () {}, // 生命周期 - 挂载之前\r\n  beforeUpdate () {}, // 生命周期 - 更新之前\r\n  updated () {}, // 生命周期 - 更新之后\r\n  beforeDestroy () {}, // 生命周期 - 销毁之前\r\n  destroyed () {}, // 生命周期 - 销毁完成\r\n  activated () {} // 如果页面有keep-alive缓存功能，这个函数会触发\r\n}\r\n</script>\r\n\r\n<style lang='less' scoped>\r\n</style>\r\n"]}]}