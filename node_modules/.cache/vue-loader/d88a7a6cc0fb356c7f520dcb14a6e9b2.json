{"remainingRequest":"C:\\Users\\windows\\Project\\toutiaomobile\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\windows\\Project\\toutiaomobile\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\windows\\Project\\toutiaomobile\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\windows\\Project\\toutiaomobile\\src\\views\\article\\index.vue?vue&type=template&id=6bda6362&scoped=true&","dependencies":[{"path":"C:\\Users\\windows\\Project\\toutiaomobile\\src\\views\\article\\index.vue","mtime":1614873404644},{"path":"C:\\Users\\windows\\Project\\toutiaomobile\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\windows\\Project\\toutiaomobile\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\windows\\Project\\toutiaomobile\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\windows\\Project\\toutiaomobile\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}